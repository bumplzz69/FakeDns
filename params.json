{"name":"Fakedns","tagline":"A regular-expression based python MITM DNS server with support for DNS Rebinding attacks","body":"FakeDns\r\n=======\r\n\r\nBugs:\r\n@crypt0s - Twitter\r\nbryanhalf@gmail.com - Email\r\n\r\n\r\nA python regular-expression based DNS server!\r\n\r\n    USAGE:\r\n    ./fakedns.py [-h] -c Config path [-i interface IP address] [--rebind]\r\n\r\nThe dns.conf should be set the following way:\r\n\r\n    [RECORD TYPE CODE] [python regular expression] [answer] [rebind answer]\r\n\r\nThe answer could be a ip address or string `self`,\r\nthe `self` syntax sugar will be translated to your current machine's local ip address, such as `192.168.1.100`.\r\n\r\nIf a match is not made, the DNS server will attempt to resolve the request using whatever you have your DNS server set to on your local machine and will proxy the request to that server on behalf of the requesting user.\r\n\r\nSupported Request Types\r\n=======================\r\n    - A\r\n    - TXT\r\n    - AAAA\r\n\r\nIn-Progress Request Types\r\n=========================\r\n    - MX\r\n    - PTR\r\n    - CNAME\r\n\r\nMisc\r\n====\r\n    - Supports DNS Rebinding\r\n\r\n\r\nDNS Rebinding\r\n=============\r\n\r\nFakeDNS can support a DNS rebinding attack through the --rebind flag.  This flag will log each rule match from each client and will respond with the first address/entry the first time, and the second address/entry on every subsequent request.\r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}